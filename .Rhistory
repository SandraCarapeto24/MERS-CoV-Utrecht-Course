muh = row$muh
)
# Initial values from selected row
N0c <- row$N0c
pc  <- row$pc
Y0c <- row$Y0c
Z0c <- row$Z0c
W0c <- row$W0c
V0c <- pc * N0c
X0c <- (1 - pc) * N0c - Y0c - Z0c - W0c
N0h <- row$N0h
ph  <- row$ph
Y0h <- row$Y0h
Z0h <- row$Z0h
W0h <- row$W0h
V0h <- ph * N0h
X0h <- (1 - ph) * N0h - Y0h - Z0h - W0h
init <- c(Xc = X0c, Vc = V0c, Wc = W0c, Yc = Y0c, Zc = Z0c,
Xh = X0h, Vh = V0h, Wh = W0h, Yh = Y0h, Zh = Z0h)
# Print parameter values
cat("Parameters used in the model run:\n")
print(pars)
# Print initial conditions
cat("\nInitial values used:\n")
print(init)
# Time settings
dt <- 0.5
sim_duration <- 500
times <- seq(0, sim_duration, by = dt)
# Solve ODEs
ode.out <- ode(init, times, sveir, pars)
# Reset graphics device safely
try(dev.off(), silent = TRUE)
# Set up a 3-row layout: 1 = Camel plot, 2 = Human plot, 3 = legend
layout(matrix(c(1, 2, 3), nrow = 3, byrow = TRUE), heights = c(4, 4, 1))
# Camel Dynamics Plot
par(mar = c(5, 5, 4, 2), cex.lab = 1.5, cex.axis = 1.3, cex.main = 1.8)
plot(ode.out[, 1], ode.out[, 2], type = "l", col = "blue", lwd = 3,
ylim = c(0, N0c),
xlab = "Time (days)", ylab = "Number of Camels",
main = "Camel Dynamics")
lines(ode.out[, 1], ode.out[, 3], col = "purple", lwd = 3)
lines(ode.out[, 1], ode.out[, 4], col = "orange", lwd = 3)
lines(ode.out[, 1], ode.out[, 5], col = "red", lwd = 3)
lines(ode.out[, 1], ode.out[, 6], col = "green", lwd = 3)
# Human Dynamics Plot
par(mar = c(5, 5, 4, 2))
plot(ode.out[, 1], ode.out[, 7] / 1e6, type = "l", col = "blue", lwd = 3,
ylim = c(0, N0h / 1e6),
xlab = "Time (days)", ylab = "Number of Humans (millions)",
main = "Human Dynamics")
lines(ode.out[, 1], ode.out[, 8] / 1e6, col = "purple", lwd = 3)
lines(ode.out[, 1], ode.out[, 9] / 1e6, col = "orange", lwd = 3)
lines(ode.out[, 1], ode.out[, 10] / 1e6, col = "red", lwd = 3)
lines(ode.out[, 1], ode.out[, 11] / 1e6, col = "green", lwd = 3)
# --- Unified Legend in Two Rows ---
par(mar = c(0, 0, 0, 0))
plot.new()
# Split legend text and colors into two rows
legend_labels_row1 <- c("Susceptible", "Vaccinated", "Latent")
legend_colors_row1 <- c("blue", "purple", "orange")
legend_labels_row2 <- c("Infectious", "Recovered")
legend_colors_row2 <- c("red", "green")
# Plot both rows manually using `legend()` twice
legend("center", legend = legend_labels_row1,
col = legend_colors_row1, lwd = 3, horiz = TRUE,
cex = 1.2, bty = "n", text.font = 2, y.intersp = 1)
legend("bottom", legend = legend_labels_row2,
col = legend_colors_row2, lwd = 3, horiz = TRUE,
cex = 1.2, bty = "n", text.font = 2, y.intersp = 1)
# Reset layout and margins
par(mfrow = c(1, 1))
par(mar = c(7, 5, 4, 5))  # enough bottom margin for text
par(cex.lab = 1.4, cex.axis = 1.2, cex.main = 1.6)
# Time step
dt <- times[2] - times[1]
# Total camel population over time
Nc_t <- ode.out[, "Xc"] + ode.out[, "Vc"] + ode.out[, "Wc"] + ode.out[, "Yc"] + ode.out[, "Zc"]
# New and cumulative camel infections
new_infections_c <- pars["betacc"] * ode.out[, "Xc"] * ode.out[, "Yc"] / Nc_t
cumulative_infections_c <- cumsum(new_infections_c * dt)
final_infections_c <- round(tail(cumulative_infections_c, 1))
# Total human population over time
Nh_t <- ode.out[, "Xh"] + ode.out[, "Vh"] + ode.out[, "Wh"] + ode.out[, "Yh"] + ode.out[, "Zh"]
# New and cumulative human infections
new_infections_h <- pars["betahh"] * ode.out[, "Xh"] * ode.out[, "Yh"] / Nh_t +
pars["betahc"] * ode.out[, "Xh"] * ode.out[, "Yc"] / Nc_t
cumulative_infections_h <- cumsum(new_infections_h * dt)
final_infections_h <- round(tail(cumulative_infections_h, 1))
# Plot cumulative infected camels (left axis)
plot(ode.out[, "time"], cumulative_infections_c, type = "l", lwd = 3, col = "red",
xlab = "Time (days)", ylab = "Infected Camels",
main = "Infected Camels and Humans")
# Add cumulative infected humans (right axis, in millions)
par(new = TRUE)
plot(ode.out[, "time"], cumulative_infections_h / 1e6, type = "l", lwd = 3, col = "blue",
axes = FALSE, xlab = "", ylab = "")
axis(side = 4)
mtext("Infected Humans (millions)", side = 4, line = 3, cex = 1.3)
# Add legend at bottom right INSIDE the plot
legend("bottomright",
legend = c("Infected Camels", "Infected Humans"),
col = c("red", "blue"), lwd = 3, bty = "n", text.font = 2, inset = c(0.02, 0.02))
# Display total values BELOW the plot, aligned right
# Use 'usr' to get x and y limits for positioning text
usr <- par("usr")
x_pos <- usr[2]  # right x-axis limit
y_pos <- usr[3] - 0.1 * (usr[4] - usr[3])  # slightly below plot area
# Place totals with right alignment
mtext(text = paste("Total Infected Camels:", format(final_infections_c, big.mark = ",")),
side = 1, line = 5.5, adj = 1, cex = 1.1, col = "red", font = 2)
mtext(text = paste("Total Infected Humans:", format(final_infections_h, big.mark = ",")),
side = 1, line = 4.2, adj = 1, cex = 1.1, col = "blue", font = 2)
# Load necessary library
library(ggplot2)
# Constants
Rcc <- 0.164 / 0.08
Rhh <- 0.0864 / (0.07 + 0.002)
# Re function
Re_function <- function(pc, ph) {
term1 <- (1 - pc) * Rcc
term2 <- (1 - ph) * Rhh
0.5 * (term1 + term2 + abs(term1 - term2))  # sqrt(x^2) = |x|
}
# Theme for clean plots
clean_theme <- theme_minimal() +
theme(
panel.grid = element_blank(),
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)
)
# 1. Vaccinating camels (ph = 0, varying pc)
pc_vals <- seq(0, 1, length.out = 100)
Re_camels <- sapply(pc_vals, function(pc) Re_function(pc, ph = 0))
df_camels <- data.frame(pc = pc_vals, Re = Re_camels)
ggplot(df_camels, aes(x = pc, y = Re)) +
geom_line(color = "blue", size = 1) +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
labs(
title = "Vaccinating Camels",
x = "Camel vaccination coverage (pc)",
y = expression(R[e] / R[0])
) +
ylim(0, max(df_camels$Re) * 1.05) +
clean_theme
# 2. Vaccinating humans (pc = 0, varying ph)
ph_vals <- seq(0, 1, length.out = 100)
Re_humans <- sapply(ph_vals, function(ph) Re_function(pc = 0, ph))
df_humans <- data.frame(ph = ph_vals, Re = Re_humans)
ggplot(df_humans, aes(x = ph, y = Re)) +
geom_line(color = "darkgreen", size = 1) +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
labs(
title = "Vaccinating Humans",
x = "Human vaccination coverage (ph)",
y = expression(R[e] / R[0])
) +
ylim(0, max(df_humans$Re) * 1.05) +
clean_theme
# 3. Vaccinating both (pc = 0.5122, varying ph)
Re_combined <- sapply(ph_vals, function(ph) Re_function(pc = 0.5122, ph))
df_combined <- data.frame(ph = ph_vals, Re = Re_combined)
# 3. Vaccinating both (pc = 0.5122, varying ph)
Re_combined <- sapply(ph_vals, function(ph) Re_function(pc = 0.5122, ph))
df_combined <- data.frame(ph = ph_vals, Re = Re_combined)
ggplot(df_combined, aes(x = ph, y = Re)) +
geom_line(color = "purple", size = 1) +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
labs(
title = "Vaccinating Humans and Camels (pc = 0.5122)",
x = "Human vaccination coverage (ph)",
y = expression(R[e] / R[0])
) +
ylim(0, max(df_combined$Re) * 1.05) +
clean_theme
# Plot 1 (Vaccinating Camels)
ggplot(df_camels, aes(x = pc, y = Re)) +
geom_line(color = "blue", size = 1) +
geom_hline(yintercept = 0, color = "black") +  # x-axis line
geom_vline(xintercept = 0, color = "black") +  # y-axis line
labs(
title = "Vaccinating Camels",
x = "Camel vaccination coverage (pc)",
y = "Re"
) +
ylim(0, max(df_camels$Re) * 1.05) +
clean_theme
# Plot 2 (Vaccinating Humans)
ggplot(df_humans, aes(x = ph, y = Re)) +
geom_line(color = "darkgreen", size = 1) +
geom_hline(yintercept = 0, color = "black") +  # x-axis line
geom_vline(xintercept = 0, color = "black") +  # y-axis line
labs(
title = "Vaccinating Humans",
x = "Human vaccination coverage (ph)",
y = "Re"
) +
ylim(0, max(df_humans$Re) * 1.05) +
clean_theme
# Find the ph value where Re = 1 (closest)
ph_critical <- df_combined$ph[which.min(abs(df_combined$Re - 1))]
ggplot(df_combined, aes(x = ph, y = Re)) +
geom_line(color = "purple", size = 1) +
geom_vline(xintercept = ph_critical, linetype = "dashed", color = "blue") +  # vertical dashed line at ph_critical
geom_hline(yintercept = 0, color = "black") +  # x-axis line
geom_vline(xintercept = 0, color = "black") +  # y-axis line
labs(
title = "Vaccinating Humans and Camels (pc = 0.5122)",
x = "Human vaccination coverage (ph)",
y = "Re"
) +
ylim(0, max(df_combined$Re) * 1.05) +
clean_theme
#Ordinary differential Equations
sveir <- function(Time, State, pars){
with(as.list(c(State,pars)),{
Nc <- Xc + Vc + Wc + Yc + Zc  # Total camel population
dXc <- - 1 * betacc * Xc * Yc/Nc + omegac * Vc
dVc <- -omegac * Vc
dWc <- betacc * Xc * Yc / Nc - sigmac * Wc
dYc <- sigmac * Wc - gammac * Yc
dZc <- gammac * Yc
Nh <- Xh + Vh + Wh + Yh + Zh  # Total human population
dXh <- - 1 * betahh * Xh * Yh/Nh - 1 * betahc * Xh * Yc/Nc + omegah * Vh
dVh <- -omegah * Vh
dWh <- betahh * Xh * Yh / Nh + betahc * Xh * Yc / Nc - sigmah * Wh
dYh <- sigmah * Wh - gammah * Yh - muh * Yh
dZh <- gammah * Yh
return(list(c(dXc, dVc, dWc, dYc, dZc, dXh, dVh, dWh, dYh, dZh)))
})
}
param_table <- read.csv("Data.csv", sep = ";", stringsAsFactors = FALSE)
run_index <- 4
if (run_index < 1 || run_index > nrow(param_table)) {
stop("Invalid run index. Please choose a number between 1 and ", nrow(param_table))
}
row <- param_table[run_index, ]
cat("\n--- Running scenario", run_index, "---\n")
# Extract and construct parameter vector for the model
pars <- c(
betacc = row$betacc,
omegac = row$omegac,
sigmac = row$sigmac,
gammac = row$gammac,
betahh = row$betahh,
betahc = row$betahc,
omegah = row$omegah,
sigmah = row$sigmah,
gammah = row$gammah,
muh = row$muh
)
# Initial values from selected row
N0c <- row$N0c
pc  <- row$pc
Y0c <- row$Y0c
Z0c <- row$Z0c
W0c <- row$W0c
V0c <- pc * N0c
X0c <- (1 - pc) * N0c - Y0c - Z0c - W0c
N0h <- row$N0h
ph  <- row$ph
Y0h <- row$Y0h
Z0h <- row$Z0h
W0h <- row$W0h
V0h <- ph * N0h
X0h <- (1 - ph) * N0h - Y0h - Z0h - W0h
init <- c(Xc = X0c, Vc = V0c, Wc = W0c, Yc = Y0c, Zc = Z0c,
Xh = X0h, Vh = V0h, Wh = W0h, Yh = Y0h, Zh = Z0h)
# Print parameter values
cat("Parameters used in the model run:\n")
print(pars)
# Print initial conditions
cat("\nInitial values used:\n")
print(init)
# Time settings
dt <- 0.5
sim_duration <- 500
times <- seq(0, sim_duration, by = dt)
# Solve ODEs
ode.out <- ode(init, times, sveir, pars)
# Reset graphics device safely
try(dev.off(), silent = TRUE)
# Set up a 3-row layout: 1 = Camel plot, 2 = Human plot, 3 = legend
layout(matrix(c(1, 2, 3), nrow = 3, byrow = TRUE), heights = c(4, 4, 1))
# Camel Dynamics Plot
par(mar = c(5, 5, 4, 2), cex.lab = 1.5, cex.axis = 1.3, cex.main = 1.8)
plot(ode.out[, 1], ode.out[, 2], type = "l", col = "blue", lwd = 3,
ylim = c(0, N0c),
xlab = "Time (days)", ylab = "Number of Camels",
main = "Camel Dynamics")
lines(ode.out[, 1], ode.out[, 3], col = "purple", lwd = 3)
lines(ode.out[, 1], ode.out[, 4], col = "orange", lwd = 3)
lines(ode.out[, 1], ode.out[, 5], col = "red", lwd = 3)
lines(ode.out[, 1], ode.out[, 6], col = "green", lwd = 3)
# Human Dynamics Plot
par(mar = c(5, 5, 4, 2))
plot(ode.out[, 1], ode.out[, 7] / 1e6, type = "l", col = "blue", lwd = 3,
ylim = c(0, N0h / 1e6),
xlab = "Time (days)", ylab = "Number of Humans (millions)",
main = "Human Dynamics")
lines(ode.out[, 1], ode.out[, 8] / 1e6, col = "purple", lwd = 3)
lines(ode.out[, 1], ode.out[, 9] / 1e6, col = "orange", lwd = 3)
lines(ode.out[, 1], ode.out[, 10] / 1e6, col = "red", lwd = 3)
lines(ode.out[, 1], ode.out[, 11] / 1e6, col = "green", lwd = 3)
# --- Unified Legend in Two Rows ---
par(mar = c(0, 0, 0, 0))
plot.new()
# Split legend text and colors into two rows
legend_labels_row1 <- c("Susceptible", "Vaccinated", "Latent")
legend_colors_row1 <- c("blue", "purple", "orange")
legend_labels_row2 <- c("Infectious", "Recovered")
legend_colors_row2 <- c("red", "green")
# Plot both rows manually using `legend()` twice
legend("center", legend = legend_labels_row1,
col = legend_colors_row1, lwd = 3, horiz = TRUE,
cex = 1.2, bty = "n", text.font = 2, y.intersp = 1)
legend("bottom", legend = legend_labels_row2,
col = legend_colors_row2, lwd = 3, horiz = TRUE,
cex = 1.2, bty = "n", text.font = 2, y.intersp = 1)
# Reset layout and margins
par(mfrow = c(1, 1))
par(mar = c(7, 5, 4, 5))  # enough bottom margin for text
par(cex.lab = 1.4, cex.axis = 1.2, cex.main = 1.6)
# Time step
dt <- times[2] - times[1]
# Total camel population over time
Nc_t <- ode.out[, "Xc"] + ode.out[, "Vc"] + ode.out[, "Wc"] + ode.out[, "Yc"] + ode.out[, "Zc"]
# New and cumulative camel infections
new_infections_c <- pars["betacc"] * ode.out[, "Xc"] * ode.out[, "Yc"] / Nc_t
cumulative_infections_c <- cumsum(new_infections_c * dt)
final_infections_c <- round(tail(cumulative_infections_c, 1))
# Total human population over time
Nh_t <- ode.out[, "Xh"] + ode.out[, "Vh"] + ode.out[, "Wh"] + ode.out[, "Yh"] + ode.out[, "Zh"]
# New and cumulative human infections
new_infections_h <- pars["betahh"] * ode.out[, "Xh"] * ode.out[, "Yh"] / Nh_t +
pars["betahc"] * ode.out[, "Xh"] * ode.out[, "Yc"] / Nc_t
cumulative_infections_h <- cumsum(new_infections_h * dt)
final_infections_h <- round(tail(cumulative_infections_h, 1))
# Plot cumulative infected camels (left axis)
plot(ode.out[, "time"], cumulative_infections_c, type = "l", lwd = 3, col = "red",
xlab = "Time (days)", ylab = "Infected Camels",
main = "Infected Camels and Humans")
# Add cumulative infected humans (right axis, in millions)
par(new = TRUE)
plot(ode.out[, "time"], cumulative_infections_h / 1e6, type = "l", lwd = 3, col = "blue",
axes = FALSE, xlab = "", ylab = "")
axis(side = 4)
mtext("Infected Humans (millions)", side = 4, line = 3, cex = 1.3)
# Add legend at bottom right INSIDE the plot
legend("bottomright",
legend = c("Infected Camels", "Infected Humans"),
col = c("red", "blue"), lwd = 3, bty = "n", text.font = 2, inset = c(0.02, 0.02))
# Display total values BELOW the plot, aligned right
# Use 'usr' to get x and y limits for positioning text
usr <- par("usr")
x_pos <- usr[2]  # right x-axis limit
y_pos <- usr[3] - 0.1 * (usr[4] - usr[3])  # slightly below plot area
# Place totals with right alignment
mtext(text = paste("Total Infected Camels:", format(final_infections_c, big.mark = ",")),
side = 1, line = 5.5, adj = 1, cex = 1.1, col = "red", font = 2)
mtext(text = paste("Total Infected Humans:", format(final_infections_h, big.mark = ",")),
side = 1, line = 4.2, adj = 1, cex = 1.1, col = "blue", font = 2)
#Ordinary differential Equations
sveir <- function(Time, State, pars){
with(as.list(c(State,pars)),{
Nc <- Xc + Vc + Wc + Yc + Zc  # Total camel population
dXc <- - 1 * betacc * Xc * Yc/Nc + omegac * Vc
dVc <- -omegac * Vc
dWc <- betacc * Xc * Yc / Nc - sigmac * Wc
dYc <- sigmac * Wc - gammac * Yc
dZc <- gammac * Yc
Nh <- Xh + Vh + Wh + Yh + Zh  # Total human population
dXh <- - 1 * betahh * Xh * Yh/Nh - 1 * betahc * Xh * Yc/Nc + omegah * Vh
dVh <- -omegah * Vh
dWh <- betahh * Xh * Yh / Nh + betahc * Xh * Yc / Nc - sigmah * Wh
dYh <- sigmah * Wh - gammah * Yh - muh * Yh
dZh <- gammah * Yh
return(list(c(dXc, dVc, dWc, dYc, dZc, dXh, dVh, dWh, dYh, dZh)))
})
}
param_table <- read.csv("Data.csv", sep = ";", stringsAsFactors = FALSE)
run_index <- 5
if (run_index < 1 || run_index > nrow(param_table)) {
stop("Invalid run index. Please choose a number between 1 and ", nrow(param_table))
}
row <- param_table[run_index, ]
cat("\n--- Running scenario", run_index, "---\n")
# Extract and construct parameter vector for the model
pars <- c(
betacc = row$betacc,
omegac = row$omegac,
sigmac = row$sigmac,
gammac = row$gammac,
betahh = row$betahh,
betahc = row$betahc,
omegah = row$omegah,
sigmah = row$sigmah,
gammah = row$gammah,
muh = row$muh
)
# Initial values from selected row
N0c <- row$N0c
pc  <- row$pc
Y0c <- row$Y0c
Z0c <- row$Z0c
W0c <- row$W0c
V0c <- pc * N0c
X0c <- (1 - pc) * N0c - Y0c - Z0c - W0c
N0h <- row$N0h
ph  <- row$ph
Y0h <- row$Y0h
Z0h <- row$Z0h
W0h <- row$W0h
V0h <- ph * N0h
X0h <- (1 - ph) * N0h - Y0h - Z0h - W0h
init <- c(Xc = X0c, Vc = V0c, Wc = W0c, Yc = Y0c, Zc = Z0c,
Xh = X0h, Vh = V0h, Wh = W0h, Yh = Y0h, Zh = Z0h)
# Print parameter values
cat("Parameters used in the model run:\n")
print(pars)
# Print initial conditions
cat("\nInitial values used:\n")
print(init)
# Time settings
dt <- 0.5
sim_duration <- 500
times <- seq(0, sim_duration, by = dt)
# Solve ODEs
ode.out <- ode(init, times, sveir, pars)
# Reset graphics device safely
try(dev.off(), silent = TRUE)
# Set up a 3-row layout: 1 = Camel plot, 2 = Human plot, 3 = legend
layout(matrix(c(1, 2, 3), nrow = 3, byrow = TRUE), heights = c(4, 4, 1))
# Camel Dynamics Plot
par(mar = c(5, 5, 4, 2), cex.lab = 1.5, cex.axis = 1.3, cex.main = 1.8)
plot(ode.out[, 1], ode.out[, 2], type = "l", col = "blue", lwd = 3,
ylim = c(0, N0c),
xlab = "Time (days)", ylab = "Number of Camels",
main = "Camel Dynamics")
lines(ode.out[, 1], ode.out[, 3], col = "purple", lwd = 3)
lines(ode.out[, 1], ode.out[, 4], col = "orange", lwd = 3)
lines(ode.out[, 1], ode.out[, 5], col = "red", lwd = 3)
lines(ode.out[, 1], ode.out[, 6], col = "green", lwd = 3)
# Human Dynamics Plot
par(mar = c(5, 5, 4, 2))
plot(ode.out[, 1], ode.out[, 7] / 1e6, type = "l", col = "blue", lwd = 3,
ylim = c(0, N0h / 1e6),
xlab = "Time (days)", ylab = "Number of Humans (millions)",
main = "Human Dynamics")
lines(ode.out[, 1], ode.out[, 8] / 1e6, col = "purple", lwd = 3)
lines(ode.out[, 1], ode.out[, 9] / 1e6, col = "orange", lwd = 3)
lines(ode.out[, 1], ode.out[, 10] / 1e6, col = "red", lwd = 3)
lines(ode.out[, 1], ode.out[, 11] / 1e6, col = "green", lwd = 3)
# --- Unified Legend in Two Rows ---
par(mar = c(0, 0, 0, 0))
plot.new()
# Split legend text and colors into two rows
legend_labels_row1 <- c("Susceptible", "Vaccinated", "Latent")
legend_colors_row1 <- c("blue", "purple", "orange")
legend_labels_row2 <- c("Infectious", "Recovered")
legend_colors_row2 <- c("red", "green")
# Plot both rows manually using `legend()` twice
legend("center", legend = legend_labels_row1,
col = legend_colors_row1, lwd = 3, horiz = TRUE,
cex = 1.2, bty = "n", text.font = 2, y.intersp = 1)
legend("bottom", legend = legend_labels_row2,
col = legend_colors_row2, lwd = 3, horiz = TRUE,
cex = 1.2, bty = "n", text.font = 2, y.intersp = 1)
# Reset layout and margins
par(mfrow = c(1, 1))
par(mar = c(7, 5, 4, 5))  # enough bottom margin for text
par(cex.lab = 1.4, cex.axis = 1.2, cex.main = 1.6)
# Time step
dt <- times[2] - times[1]
# Total camel population over time
Nc_t <- ode.out[, "Xc"] + ode.out[, "Vc"] + ode.out[, "Wc"] + ode.out[, "Yc"] + ode.out[, "Zc"]
# New and cumulative camel infections
new_infections_c <- pars["betacc"] * ode.out[, "Xc"] * ode.out[, "Yc"] / Nc_t
cumulative_infections_c <- cumsum(new_infections_c * dt)
final_infections_c <- round(tail(cumulative_infections_c, 1))
# Total human population over time
Nh_t <- ode.out[, "Xh"] + ode.out[, "Vh"] + ode.out[, "Wh"] + ode.out[, "Yh"] + ode.out[, "Zh"]
# New and cumulative human infections
new_infections_h <- pars["betahh"] * ode.out[, "Xh"] * ode.out[, "Yh"] / Nh_t +
pars["betahc"] * ode.out[, "Xh"] * ode.out[, "Yc"] / Nc_t
cumulative_infections_h <- cumsum(new_infections_h * dt)
final_infections_h <- round(tail(cumulative_infections_h, 1))
# Plot cumulative infected camels (left axis)
plot(ode.out[, "time"], cumulative_infections_c, type = "l", lwd = 3, col = "red",
xlab = "Time (days)", ylab = "Infected Camels",
main = "Infected Camels and Humans")
# Add cumulative infected humans (right axis, in millions)
par(new = TRUE)
plot(ode.out[, "time"], cumulative_infections_h / 1e6, type = "l", lwd = 3, col = "blue",
axes = FALSE, xlab = "", ylab = "")
axis(side = 4)
mtext("Infected Humans (millions)", side = 4, line = 3, cex = 1.3)
# Add legend at bottom right INSIDE the plot
legend("bottomright",
legend = c("Infected Camels", "Infected Humans"),
col = c("red", "blue"), lwd = 3, bty = "n", text.font = 2, inset = c(0.02, 0.02))
# Display total values BELOW the plot, aligned right
# Use 'usr' to get x and y limits for positioning text
usr <- par("usr")
x_pos <- usr[2]  # right x-axis limit
y_pos <- usr[3] - 0.1 * (usr[4] - usr[3])  # slightly below plot area
# Place totals with right alignment
mtext(text = paste("Total Infected Camels:", format(final_infections_c, big.mark = ",")),
side = 1, line = 5.5, adj = 1, cex = 1.1, col = "red", font = 2)
mtext(text = paste("Total Infected Humans:", format(final_infections_h, big.mark = ",")),
side = 1, line = 4.2, adj = 1, cex = 1.1, col = "blue", font = 2)
