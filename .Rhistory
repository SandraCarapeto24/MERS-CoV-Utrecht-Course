muh = row$muh
)
# Initial values from selected row
N0c <- row$N0c
pc  <- row$pc
Y0c <- row$Y0c
Z0c <- row$Z0c
W0c <- row$W0c
V0c <- pc * N0c
X0c <- (1 - pc) * N0c - Y0c - Z0c - W0c
N0h <- row$N0h
ph  <- row$ph
Y0h <- row$Y0h
Z0h <- row$Z0h
W0h <- row$W0h
V0h <- ph * N0h
X0h <- (1 - ph) * N0h - Y0h - Z0h - W0h
init <- c(Xc = X0c, Vc = V0c, Wc = W0c, Yc = Y0c, Zc = Z0c,
Xh = X0h, Vh = V0h, Wh = W0h, Yh = Y0h, Zh = Z0h)
# Print parameter values
cat("Parameters used in the model run:\n")
print(pars)
# Print initial conditions
cat("\nInitial values used:\n")
print(init)
# Time settings
dt <- 0.5
sim_duration <- 500
times <- seq(0, sim_duration, by = dt)
# Solve ODEs
ode.out <- ode(init, times, sveir, pars)
# Set up a 2x1 layout with extra space for legend
layout(matrix(c(1, 2, 3, 4), nrow = 4), heights = c(4, 1, 4, 1))
# Increase margins and font
par(mar = c(5, 5, 4, 2), cex.lab = 1.5, cex.axis = 1.3, cex.main = 1.8)
# Camel Dynamics Plot
plot(ode.out[, 1], ode.out[, 2], type = "l", col = "blue", lwd = 3,
ylim = c(0, N0c),
xlab = "Time (days)", ylab = "Number of Camels",
main = "Camel Dynamics")
lines(ode.out[, 1], ode.out[, 3], col = "purple", lwd = 3)
lines(ode.out[, 1], ode.out[, 4], col = "orange", lwd = 3)
lines(ode.out[, 1], ode.out[, 5], col = "red", lwd = 3)
lines(ode.out[, 1], ode.out[, 6], col = "green", lwd = 3)
## Camel Legend
par(mar = c(0, 0, 0, 0))  # remove margins for legend
plot.new()
legend("center", legend = c("Xc", "Vc", "Wc", "Yc", "Zc"),
col = c("blue", "purple", "orange", "red", "green"),
lwd = 3, horiz = TRUE, cex = 1.2, bty = "n", text.font = 2)
# Human Dynamics Plot
par(mar = c(5, 5, 4, 2))  # reset margins
plot(ode.out[, 1], ode.out[, 7] / 1e6, type = "l", col = "blue", lwd = 3,
ylim = c(0, N0h / 1e6),
xlab = "Time (days)", ylab = "Number of Humans (millions)",
main = "Human Dynamics")
lines(ode.out[, 1], ode.out[, 8] / 1e6, col = "purple", lwd = 3)
lines(ode.out[, 1], ode.out[, 9] / 1e6, col = "orange", lwd = 3)
lines(ode.out[, 1], ode.out[, 10] / 1e6, col = "red", lwd = 3)
lines(ode.out[, 1], ode.out[, 11] / 1e6, col = "green", lwd = 3)
# Human Legend
par(mar = c(0, 0, 0, 0))
plot.new()
legend("center", legend = c("Xh", "Vh", "Wh", "Yh", "Zh"),
col = c("blue", "purple", "orange", "red", "green"),
lwd = 3, horiz = TRUE, cex = 1.2, bty = "n", text.font = 2)
#Ordinary differential Equations
sveir <- function(Time, State, pars){
with(as.list(c(State,pars)),{
Nc <- Xc + Vc + Wc + Yc + Zc  # Total camel population
dXc <- - 1 * betacc * Xc * Yc/Nc + omegac * Vc
dVc <- -omegac * Vc
dWc <- betacc * Xc * Yc / Nc - sigmac * Wc
dYc <- sigmac * Wc - gammac * Yc
dZc <- gammac * Yc
Nh <- Xh + Vh + Wh + Yh + Zh  # Total human population
dXh <- - 1 * betahh * Xh * Yh/Nh - 1 * betahc * Xh * Yc/Nc + omegah * Vh
dVh <- -omegah * Vh
dWh <- betahh * Xh * Yh / Nh + betahc * Xh * Yc / Nc - sigmah * Wh
dYh <- sigmah * Wh - gammah * Yh - muh * Yh
dZh <- gammah * Yh
return(list(c(dXc, dVc, dWc, dYc, dZc, dXh, dVh, dWh, dYh, dZh)))
})
}
param_table <- read.csv("Data.csv", sep = ";", stringsAsFactors = FALSE)
run_index <- 1
if (run_index < 1 || run_index > nrow(param_table)) {
stop("Invalid run index. Please choose a number between 1 and ", nrow(param_table))
}
row <- param_table[run_index, ]
cat("\n--- Running scenario", run_index, "---\n")
# Extract and construct parameter vector for the model
pars <- c(
betacc = row$betacc,
omegac = row$omegac,
sigmac = row$sigmac,
gammac = row$gammac,
betahh = row$betahh,
betahc = row$betahc,
omegah = row$omegah,
sigmah = row$sigmah,
gammah = row$gammah,
muh = row$muh
)
# Initial values from selected row
N0c <- row$N0c
pc  <- row$pc
Y0c <- row$Y0c
Z0c <- row$Z0c
W0c <- row$W0c
V0c <- pc * N0c
X0c <- (1 - pc) * N0c - Y0c - Z0c - W0c
N0h <- row$N0h
ph  <- row$ph
Y0h <- row$Y0h
Z0h <- row$Z0h
W0h <- row$W0h
V0h <- ph * N0h
X0h <- (1 - ph) * N0h - Y0h - Z0h - W0h
init <- c(Xc = X0c, Vc = V0c, Wc = W0c, Yc = Y0c, Zc = Z0c,
Xh = X0h, Vh = V0h, Wh = W0h, Yh = Y0h, Zh = Z0h)
# Print parameter values
cat("Parameters used in the model run:\n")
print(pars)
# Print initial conditions
cat("\nInitial values used:\n")
print(init)
# Time settings
dt <- 0.5
sim_duration <- 500
times <- seq(0, sim_duration, by = dt)
# Solve ODEs
ode.out <- ode(init, times, sveir, pars)
# Set up a 2x1 layout with extra space for legend
layout(matrix(c(1, 2, 3, 4), nrow = 4), heights = c(4, 1, 4, 1))
# Increase margins and font
par(mar = c(5, 5, 4, 2), cex.lab = 1.5, cex.axis = 1.3, cex.main = 1.8)
# Camel Dynamics Plot
plot(ode.out[, 1], ode.out[, 2], type = "l", col = "blue", lwd = 3,
ylim = c(0, N0c),
xlab = "Time (days)", ylab = "Number of Camels",
main = "Camel Dynamics")
lines(ode.out[, 1], ode.out[, 3], col = "purple", lwd = 3)
lines(ode.out[, 1], ode.out[, 4], col = "orange", lwd = 3)
lines(ode.out[, 1], ode.out[, 5], col = "red", lwd = 3)
lines(ode.out[, 1], ode.out[, 6], col = "green", lwd = 3)
## Camel Legend
par(mar = c(0, 0, 0, 0))  # remove margins for legend
plot.new()
legend("center", legend = c("Xc", "Vc", "Wc", "Yc", "Zc"),
col = c("blue", "purple", "orange", "red", "green"),
lwd = 3, horiz = TRUE, cex = 1.2, bty = "n", text.font = 2)
# Human Dynamics Plot
par(mar = c(5, 5, 4, 2))  # reset margins
plot(ode.out[, 1], ode.out[, 7] / 1e6, type = "l", col = "blue", lwd = 3,
ylim = c(0, N0h / 1e6),
xlab = "Time (days)", ylab = "Number of Humans (millions)",
main = "Human Dynamics")
lines(ode.out[, 1], ode.out[, 8] / 1e6, col = "purple", lwd = 3)
lines(ode.out[, 1], ode.out[, 9] / 1e6, col = "orange", lwd = 3)
lines(ode.out[, 1], ode.out[, 10] / 1e6, col = "red", lwd = 3)
lines(ode.out[, 1], ode.out[, 11] / 1e6, col = "green", lwd = 3)
# Human Legend
par(mar = c(0, 0, 0, 0))
plot.new()
legend("center", legend = c("Xh", "Vh", "Wh", "Yh", "Zh"),
col = c("blue", "purple", "orange", "red", "green"),
lwd = 3, horiz = TRUE, cex = 1.2, bty = "n", text.font = 2)
#Ordinary differential Equations
sveir <- function(Time, State, pars){
with(as.list(c(State,pars)),{
Nc <- Xc + Vc + Wc + Yc + Zc  # Total camel population
dXc <- - 1 * betacc * Xc * Yc/Nc + omegac * Vc
dVc <- -omegac * Vc
dWc <- betacc * Xc * Yc / Nc - sigmac * Wc
dYc <- sigmac * Wc - gammac * Yc
dZc <- gammac * Yc
Nh <- Xh + Vh + Wh + Yh + Zh  # Total human population
dXh <- - 1 * betahh * Xh * Yh/Nh - 1 * betahc * Xh * Yc/Nc + omegah * Vh
dVh <- -omegah * Vh
dWh <- betahh * Xh * Yh / Nh + betahc * Xh * Yc / Nc - sigmah * Wh
dYh <- sigmah * Wh - gammah * Yh - muh * Yh
dZh <- gammah * Yh
return(list(c(dXc, dVc, dWc, dYc, dZc, dXh, dVh, dWh, dYh, dZh)))
})
}
param_table <- read.csv("Data.csv", sep = ";", stringsAsFactors = FALSE)
run_index <- 1
if (run_index < 1 || run_index > nrow(param_table)) {
stop("Invalid run index. Please choose a number between 1 and ", nrow(param_table))
}
row <- param_table[run_index, ]
cat("\n--- Running scenario", run_index, "---\n")
# Extract and construct parameter vector for the model
pars <- c(
betacc = row$betacc,
omegac = row$omegac,
sigmac = row$sigmac,
gammac = row$gammac,
betahh = row$betahh,
betahc = row$betahc,
omegah = row$omegah,
sigmah = row$sigmah,
gammah = row$gammah,
muh = row$muh
)
# Initial values from selected row
N0c <- row$N0c
pc  <- row$pc
Y0c <- row$Y0c
Z0c <- row$Z0c
W0c <- row$W0c
V0c <- pc * N0c
X0c <- (1 - pc) * N0c - Y0c - Z0c - W0c
N0h <- row$N0h
ph  <- row$ph
Y0h <- row$Y0h
Z0h <- row$Z0h
W0h <- row$W0h
V0h <- ph * N0h
X0h <- (1 - ph) * N0h - Y0h - Z0h - W0h
init <- c(Xc = X0c, Vc = V0c, Wc = W0c, Yc = Y0c, Zc = Z0c,
Xh = X0h, Vh = V0h, Wh = W0h, Yh = Y0h, Zh = Z0h)
# Print parameter values
cat("Parameters used in the model run:\n")
print(pars)
# Print initial conditions
cat("\nInitial values used:\n")
print(init)
# Time settings
dt <- 0.5
sim_duration <- 500
times <- seq(0, sim_duration, by = dt)
# Solve ODEs
ode.out <- ode(init, times, sveir, pars)
# Set up a 2x1 layout with extra space for legend
layout(matrix(c(1, 2, 3, 4), nrow = 4), heights = c(4, 1, 4, 1))
# Increase margins and font
par(mar = c(5, 5, 4, 2), cex.lab = 1.5, cex.axis = 1.3, cex.main = 1.8)
# Camel Dynamics Plot
plot(ode.out[, 1], ode.out[, 2], type = "l", col = "blue", lwd = 3,
ylim = c(0, N0c),
xlab = "Time (days)", ylab = "Number of Camels",
main = "Camel Dynamics")
lines(ode.out[, 1], ode.out[, 3], col = "purple", lwd = 3)
lines(ode.out[, 1], ode.out[, 4], col = "orange", lwd = 3)
lines(ode.out[, 1], ode.out[, 5], col = "red", lwd = 3)
lines(ode.out[, 1], ode.out[, 6], col = "green", lwd = 3)
## Camel Legend
par(mar = c(0, 0, 0, 0))  # remove margins for legend
plot.new()
legend("center", legend = c("Xc", "Vc", "Wc", "Yc", "Zc"),
col = c("blue", "purple", "orange", "red", "green"),
lwd = 3, horiz = TRUE, cex = 1.2, bty = "n", text.font = 2)
# Human Dynamics Plot
par(mar = c(5, 5, 4, 2))  # reset margins
plot(ode.out[, 1], ode.out[, 7] / 1e6, type = "l", col = "blue", lwd = 3,
ylim = c(0, N0h / 1e6),
xlab = "Time (days)", ylab = "Number of Humans (millions)",
main = "Human Dynamics")
lines(ode.out[, 1], ode.out[, 8] / 1e6, col = "purple", lwd = 3)
lines(ode.out[, 1], ode.out[, 9] / 1e6, col = "orange", lwd = 3)
lines(ode.out[, 1], ode.out[, 10] / 1e6, col = "red", lwd = 3)
lines(ode.out[, 1], ode.out[, 11] / 1e6, col = "green", lwd = 3)
# Human Legend
par(mar = c(0, 0, 0, 0))
plot.new()
legend("center", legend = c("Xh", "Vh", "Wh", "Yh", "Zh"),
col = c("blue", "purple", "orange", "red", "green"),
lwd = 3, horiz = TRUE, cex = 1.2, bty = "n", text.font = 2)
install.packages("pracma")
library(pracma)  # for trapz()
total_sigma_W <- sigma * trapz(time, W)
total_sigma_Wc <- sigmac * trapz(time, Wc)
total_sigma_Wc <- pars$sigmac * trapz(time, Wc)
# Calculate total camel population over time
Nc_t <- ode.out[, "Xc"] + ode.out[, "Vc"] + ode.out[, "Wc"] + ode.out[, "Yc"] + ode.out[, "Zc"]
# Calculate new infections per time step: betacc * Xc * Yc / Nc
new_infections <- pars["betacc"] * ode.out[, "Xc"] * ode.out[, "Yc"] / Nc_t
# Approximate integral (cumulative sum using trapezoidal rule or simple Riemann sum)
dt <- times[2] - times[1]
cumulative_infections <- sum(new_infections * dt)
# Print result
cat("\nEstimated final size (cumulative camel infections):", round(cumulative_infections), "\n")
# Time step
dt <- times[2] - times[1]
# Total camel population over time
Nc_t <- ode.out[, "Xc"] + ode.out[, "Vc"] + ode.out[, "Wc"] + ode.out[, "Yc"] + ode.out[, "Zc"]
# New infections at each time step
new_infections <- pars["betacc"] * ode.out[, "Xc"] * ode.out[, "Yc"] / Nc_t
# Cumulative sum over time
cumulative_infections <- cumsum(new_infections * dt)
# Plot cumulative infections over time
plot(ode.out[, "time"], cumulative_infections, type = "l", lwd = 3,
col = "darkred", xlab = "Time (days)", ylab = "Cumulative Infected Camels",
main = "Final Size of Camel Infections")
# Plot cumulative infections over time
plot(ode.out[, "time"], cumulative_infections, type = "l", lwd = 3,
col = "darkred", xlab = "Time (days)", ylab = "Cumulative Infected Camels",
main = "Final Size of Camel Infections")
# ---- Reset layout to default ----
par(mfrow = c(1, 1))  # one plot per figure
par(mar = c(5, 5, 4, 2))  # standard margins
par(cex.lab = 1.4, cex.axis = 1.2, cex.main = 1.6)  # larger fonts
# ---- Recalculate cumulative infections (in case this section is separate) ----
dt <- times[2] - times[1]
Nc_t <- ode.out[, "Xc"] + ode.out[, "Vc"] + ode.out[, "Wc"] + ode.out[, "Yc"] + ode.out[, "Zc"]
new_infections <- pars["betacc"] * ode.out[, "Xc"] * ode.out[, "Yc"] / Nc_t
cumulative_infections <- cumsum(new_infections * dt)
# ---- Plot cumulative infections ----
plot(ode.out[, "time"], cumulative_infections, type = "l", lwd = 3,
col = "darkred", xlab = "Time (days)", ylab = "Cumulative Infected Camels",
main = "Final Size of Camel Infections")
# ---- Add horizontal line for final size ----
abline(h = tail(cumulative_infections, 1), col = "blue", lty = 2)
# ---- Add legend ----
legend("bottomright", legend = paste("Final size:", round(tail(cumulative_infections, 1))),
col = "darkred", lwd = 3, bty = "n", text.font = 2)
# ---- Recalculate cumulative camel infections ----
dt <- times[2] - times[1]
Nc_t <- ode.out[, "Xc"] + ode.out[, "Vc"] + ode.out[, "Wc"] + ode.out[, "Yc"] + ode.out[, "Zc"]
new_infections <- pars["betacc"] * ode.out[, "Xc"] * ode.out[, "Yc"] / Nc_t
cumulative_infections <- cumsum(new_infections * dt)
# ---- Reset layout ----
par(mfrow = c(1, 1))
par(mar = c(5, 5, 4, 5))  # extra space for right-side axis
par(cex.lab = 1.4, cex.axis = 1.2, cex.main = 1.6)
# ---- Plot cumulative camel infections (left axis) ----
plot(ode.out[, "time"], cumulative_infections, type = "l", lwd = 3,
col = "darkred", xlab = "Time (days)", ylab = "Cumulative Infected Camels",
main = "Cumulative Camel Infections & Susceptible Humans")
# ---- Add Xh (susceptible humans) with right-side axis ----
par(new = TRUE)
plot(ode.out[, "time"], ode.out[, "Xh"], type = "l", lwd = 3, col = "blue",
axes = FALSE, xlab = "", ylab = "", main = "")
axis(side = 4, col.axis = "blue", col = "blue", lwd = 2)
mtext("Susceptible Humans (Xh)", side = 4, line = 3, col = "blue", cex = 1.3)
# ---- Add legends ----
legend("topright",
legend = c("Cumulative Infected Camels", "Susceptible Humans (Xh)"),
col = c("darkred", "blue"), lwd = 3, bty = "n", text.font = 2)
# ---- Reset layout ----
par(mfrow = c(1, 1))
par(mar = c(5, 5, 4, 5))  # allow space for right-side axis
par(cex.lab = 1.4, cex.axis = 1.2, cex.main = 1.6)
# ---- Calculate cumulative camel infections ----
dt <- times[2] - times[1]
Nc_t <- ode.out[, "Xc"] + ode.out[, "Vc"] + ode.out[, "Wc"] + ode.out[, "Yc"] + ode.out[, "Zc"]
new_infections_c <- pars["betacc"] * ode.out[, "Xc"] * ode.out[, "Yc"] / Nc_t
cumulative_infections_c <- cumsum(new_infections_c * dt)
final_infections_c <- round(tail(cumulative_infections_c, 1))
# ---- Plot Infected Camels (Yc) on left axis ----
plot(ode.out[, "time"], ode.out[, "Yc"], type = "l", lwd = 3, col = "red",
xlab = "Time (days)", ylab = "Infected Camels (Yc)",
main = "Infected Camels (Yc) and Infected Humans (Yh)")
# ---- Reset layout ----
par(mfrow = c(1, 1))
par(mar = c(5, 5, 4, 5))  # extra space for right-side axis
par(cex.lab = 1.4, cex.axis = 1.2, cex.main = 1.6)
# ---- Calculate cumulative infections for camels ----
dt <- times[2] - times[1]
Nc_t <- ode.out[, "Xc"] + ode.out[, "Vc"] + ode.out[, "Wc"] + ode.out[, "Yc"] + ode.out[, "Zc"]
new_infections_c <- pars["betacc"] * ode.out[, "Xc"] * ode.out[, "Yc"] / Nc_t
cumulative_infections_c <- cumsum(new_infections_c * dt)
final_infections_c <- round(tail(cumulative_infections_c, 1))
# ---- Calculate cumulative infections for humans ----
Nh_t <- ode.out[, "Xh"] + ode.out[, "Vh"] + ode.out[, "Wh"] + ode.out[, "Yh"] + ode.out[, "Zh"]
new_infections_h <- pars["betahh"] * ode.out[, "Xh"] * ode.out[, "Yh"] / Nh_t +
pars["betahc"] * ode.out[, "Xh"] * ode.out[, "Yc"] / Nc_t
cumulative_infections_h <- cumsum(new_infections_h * dt)
final_infections_h <- round(tail(cumulative_infections_h, 1))
# ---- Plot cumulative infected camels (left Y-axis) ----
plot(ode.out[, "time"], cumulative_infections_c, type = "l", lwd = 3, col = "red",
xlab = "Time (days)", ylab = "Cumulative Infected Camels",
main = "Cumulative Infected Camels and Humans")
# ---- Add cumulative infected humans (right Y-axis, in millions) ----
par(new = TRUE)
plot(ode.out[, "time"], cumulative_infections_h / 1e6, type = "l", lwd = 3, col = "blue",
axes = FALSE, xlab = "", ylab = "")
axis(side = 4, col.axis = "blue", col = "blue", lwd = 2)
mtext("Cumulative Infected Humans (millions)", side = 4, line = 3, col = "blue", cex = 1.3)
# ---- Add legend ----
legend("topright",
legend = c("Infected Camels (cumulative)", "Infected Humans (cumulative)"),
col = c("red", "blue"), lwd = 3, bty = "n", text.font = 2)
# ---- Display final cumulative totals below the plot ----
mtext(paste("Total Infected Camels:", format(final_infections_c, big.mark = ","),
" | Total Infected Humans:", format(final_infections_h, big.mark = ",")),
side = 1, line = 5, cex = 1.2, col = "black", font = 2)
# ---- Display total values BELOW plot ----
mtext(paste("Total Infected Camels:", format(final_infections_c, big.mark = ","),
"| Total Infected Humans:", format(final_infections_h, big.mark = ",")),
side = 1, line = 6, cex = 1.1, col = "black", font = 2)
# ---- Reset layout ----
par(mfrow = c(1, 1))
par(mar = c(5, 5, 4, 5))  # extra space for right-side axis
par(cex.lab = 1.4, cex.axis = 1.2, cex.main = 1.6)
# ---- Calculate cumulative infections for camels ----
dt <- times[2] - times[1]
Nc_t <- ode.out[, "Xc"] + ode.out[, "Vc"] + ode.out[, "Wc"] + ode.out[, "Yc"] + ode.out[, "Zc"]
new_infections_c <- pars["betacc"] * ode.out[, "Xc"] * ode.out[, "Yc"] / Nc_t
cumulative_infections_c <- cumsum(new_infections_c * dt)
final_infections_c <- round(tail(cumulative_infections_c, 1))
# ---- Calculate cumulative infections for humans ----
Nh_t <- ode.out[, "Xh"] + ode.out[, "Vh"] + ode.out[, "Wh"] + ode.out[, "Yh"] + ode.out[, "Zh"]
new_infections_h <- pars["betahh"] * ode.out[, "Xh"] * ode.out[, "Yh"] / Nh_t +
pars["betahc"] * ode.out[, "Xh"] * ode.out[, "Yc"] / Nc_t
cumulative_infections_h <- cumsum(new_infections_h * dt)
final_infections_h <- round(tail(cumulative_infections_h, 1))
# ---- Plot cumulative infected camels (left Y-axis) ----
plot(ode.out[, "time"], cumulative_infections_c, type = "l", lwd = 3, col = "red",
xlab = "Time (days)", ylab = "Infected Camels",
main = "Infected Camels and Humans")
# ---- Add cumulative infected humans (right Y-axis, in millions) ----
par(new = TRUE)
plot(ode.out[, "time"], cumulative_infections_h / 1e6, type = "l", lwd = 3, col = "blue",
axes = FALSE, xlab = "", ylab = "")
axis(side = 4, col.axis = "blue", col = "blue", lwd = 2)
mtext("Infected Humans (millions)", side = 4, line = 3, col = "blue", cex = 1.3)
# ---- Add legend ----
legend("topright",
legend = c("Infected Camels", "Infected Humans"),
col = c("red", "blue"), lwd = 3, bty = "n", text.font = 2)
# ---- Display total values BELOW plot ----
mtext(paste("Total Infected Camels:", format(final_infections_c, big.mark = ","),
"| Total Infected Humans:", format(final_infections_h, big.mark = ",")),
side = 1, line = 6, cex = 1.1, col = "black", font = 2)
# ---- Reset layout and margins ----
par(mfrow = c(1, 1))
par(mar = c(7, 5, 4, 5))  # enough bottom margin for text
par(cex.lab = 1.4, cex.axis = 1.2, cex.main = 1.6)
# ---- Time step ----
dt <- times[2] - times[1]
# ---- Total camel population over time ----
Nc_t <- ode.out[, "Xc"] + ode.out[, "Vc"] + ode.out[, "Wc"] + ode.out[, "Yc"] + ode.out[, "Zc"]
# ---- New and cumulative camel infections ----
new_infections_c <- pars["betacc"] * ode.out[, "Xc"] * ode.out[, "Yc"] / Nc_t
cumulative_infections_c <- cumsum(new_infections_c * dt)
final_infections_c <- round(tail(cumulative_infections_c, 1))
# ---- Total human population over time ----
Nh_t <- ode.out[, "Xh"] + ode.out[, "Vh"] + ode.out[, "Wh"] + ode.out[, "Yh"] + ode.out[, "Zh"]
# ---- New and cumulative human infections ----
new_infections_h <- pars["betahh"] * ode.out[, "Xh"] * ode.out[, "Yh"] / Nh_t +
pars["betahc"] * ode.out[, "Xh"] * ode.out[, "Yc"] / Nc_t
cumulative_infections_h <- cumsum(new_infections_h * dt)
final_infections_h <- round(tail(cumulative_infections_h, 1))
# ---- Plot cumulative infected camels (left axis) ----
plot(ode.out[, "time"], cumulative_infections_c, type = "l", lwd = 3, col = "red",
xlab = "Time (days)", ylab = "Cumulative Infected Camels",
main = "Cumulative Infected Camels and Humans")
# ---- Add cumulative infected humans (right axis, in millions) ----
par(new = TRUE)
plot(ode.out[, "time"], cumulative_infections_h / 1e6, type = "l", lwd = 3, col = "blue",
axes = FALSE, xlab = "", ylab = "")
axis(side = 4, col.axis = "blue", col = "blue", lwd = 2)
mtext("Cumulative Infected Humans (millions)", side = 4, line = 3, col = "blue", cex = 1.3)
# ---- Add legend at bottom right INSIDE the plot ----
legend("bottomright",
legend = c("Infected Camels (cumulative)", "Infected Humans (cumulative)"),
col = c("red", "blue"), lwd = 3, bty = "n", text.font = 2, inset = c(0.02, 0.02))
# ---- Display total values BELOW the plot, aligned right ----
# Use 'usr' to get x and y limits for positioning text
usr <- par("usr")
x_pos <- usr[2]  # right x-axis limit
y_pos <- usr[3] - 0.1 * (usr[4] - usr[3])  # slightly below plot area
# Place totals with right alignment
mtext(text = paste("Total Infected Camels:", format(final_infections_c, big.mark = ",")),
side = 1, line = 5.5, adj = 1, cex = 1.1, col = "red", font = 2)
mtext(text = paste("Total Infected Humans:", format(final_infections_h, big.mark = ",")),
side = 1, line = 4.2, adj = 1, cex = 1.1, col = "blue", font = 2)
par(mfrow = c(1, 1))
par(mar = c(7, 5, 4, 5))  # enough bottom margin for text
par(cex.lab = 1.4, cex.axis = 1.2, cex.main = 1.6)
# ---- Time step ----
dt <- times[2] - times[1]
# ---- Total camel population over time ----
Nc_t <- ode.out[, "Xc"] + ode.out[, "Vc"] + ode.out[, "Wc"] + ode.out[, "Yc"] + ode.out[, "Zc"]
# ---- New and cumulative camel infections ----
new_infections_c <- pars["betacc"] * ode.out[, "Xc"] * ode.out[, "Yc"] / Nc_t
cumulative_infections_c <- cumsum(new_infections_c * dt)
final_infections_c <- round(tail(cumulative_infections_c, 1))
# ---- Total human population over time ----
Nh_t <- ode.out[, "Xh"] + ode.out[, "Vh"] + ode.out[, "Wh"] + ode.out[, "Yh"] + ode.out[, "Zh"]
# ---- New and cumulative human infections ----
new_infections_h <- pars["betahh"] * ode.out[, "Xh"] * ode.out[, "Yh"] / Nh_t +
pars["betahc"] * ode.out[, "Xh"] * ode.out[, "Yc"] / Nc_t
cumulative_infections_h <- cumsum(new_infections_h * dt)
final_infections_h <- round(tail(cumulative_infections_h, 1))
# ---- Plot cumulative infected camels (left axis) ----
plot(ode.out[, "time"], cumulative_infections_c, type = "l", lwd = 3, col = "red",
xlab = "Time (days)", ylab = "Infected Camels",
main = "Infected Camels and Humans")
# ---- Add cumulative infected humans (right axis, in millions) ----
par(new = TRUE)
plot(ode.out[, "time"], cumulative_infections_h / 1e6, type = "l", lwd = 3, col = "blue",
axes = FALSE, xlab = "", ylab = "")
axis(side = 4, col.axis = "blue", col = "blue", lwd = 2)
mtext("Cumulative Infected Humans (millions)", side = 4, line = 3, col = "blue", cex = 1.3)
# ---- Add legend at bottom right INSIDE the plot ----
legend("bottomright",
legend = c("Infected Camels", "Infected Humans"),
col = c("red", "blue"), lwd = 3, bty = "n", text.font = 2, inset = c(0.02, 0.02))
# ---- Display total values BELOW the plot, aligned right ----
# Use 'usr' to get x and y limits for positioning text
usr <- par("usr")
x_pos <- usr[2]  # right x-axis limit
y_pos <- usr[3] - 0.1 * (usr[4] - usr[3])  # slightly below plot area
# Place totals with right alignment
mtext(text = paste("Total Infected Camels:", format(final_infections_c, big.mark = ",")),
side = 1, line = 5.5, adj = 1, cex = 1.1, col = "red", font = 2)
mtext(text = paste("Total Infected Humans:", format(final_infections_h, big.mark = ",")),
side = 1, line = 4.2, adj = 1, cex = 1.1, col = "blue", font = 2)
